map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 0.0.0.0:443 ssl;
	server_name localhost;

	ssl_certificate /run/secrets/ssl-cert.pem;
	ssl_certificate_key /run/secrets/ssl-key.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers HIGH:!aNULL:MD5;

    access_log  /var/log/nginx/host.access.log  main;
	error_log /var/log/nginx/error.log debug;

	# all requests are initially routed to the front
    location / {
        proxy_pass https://frontend:1212;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

		# Security Header aiming to protect users from XSS
		add_header Content-Security-Policy "script-src 'self'; style-src 'self'; object-src 'self'; base-URI 'self';" always;
			# sript-src 'self'; 
				# only external scripts loaded from localhost:8443 are 
				# allowed to execute.
					# Blocks inline javascript from executing, avoiding XSS 
					# attacks if injected scripts escape sanitization.
						# If we do need inline javascript or event listeners,
						# we can reenable it by implementing nonces.
						# Nonces are randomly generated values that the server 
						# includes in every HTTP header response and sets in 
						# inline or external scripts.
						# Ex: <script nonce="val"> ... script ... </script>
						# The browser then matches the value in the header with 
						# the attribute value and executes the script only if 
						# the two match.
						# It sounds heavy weight and complex, so for now we 
						# have localisation based-safety instead of that; 
						# it MAY change as we need it.
			
			# style-src 'self'; 
				# same for CSS (not sure if needed)
			# img-src 'http://cdn.com'
				# we don't have a CDN yet, so not adding that, but we will need it later to allow images to load. 
			# object-src 'self';
				# Blocks external objects embeds 
			# base-URI 'self';
				# Makes so that the < base > HTML tag defaults the our servername.
		
		# forbids browser from guessing the content type of a payload, limiting 
		# innocent or malicious misinterpretations.
		add_header X-Content-Type-Options "nosniff" always;

		# defines that the only origin allowed to load the requested ressource
		# is on the same host, protocol and port as the server. 
		add_header Cross-Origin-Resource-Policy "same-origin" always;

		# avoid leaking information about where the user comes from within the website
		# when communicating with third party apps.
		add_header Referer-Policy "strict-origin-when-cross-origin" always;
	}

	# routes prefixed with /api are rerouted to the appropriate service

	# responsible for account creation, deletion and setting updates
	location /api/account/ {
		add_header Content-Type "application/json charset=utf-8" always;
        proxy_pass https://account:1414;
    }

	# responsible for login/logout operations and token refreshes
	location /api/auth/ {
		add_header Content-Type "application/json charset=utf-8" always;
		proxy_pass https://auth:3939;
    }

	# handles friendship management system
	location /api/user/friends/ {
		add_header Content-Type "application/json charset=utf-8" always;
        proxy_pass https://friends:1616;
    }

	# handles users management system (user search and database interaction)
	location /api/users/ {
		add_header Content-Type "application/json charset=utf-8" always;
		proxy_pass https://users:2626;
	}

	# these will eventually become NATS subscribers
	# they are not part of the HTTP API documentation
    location /api/game/leaderboard {
		add_header Content-Type "application/json charset=utf-8" always;
        proxy_pass https://dashboard:1515;
    }

    location /api/gamemanager {
		add_header Content-Type "application/json charset=utf-8" always;
        proxy_pass https://gamemanager:2121;
    }


    location /api/game/lobby {
		proxy_pass https://lobby:2222;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/game/match {
		proxy_pass https://pong:2020;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    # error_page   500 502 503 504  /50x.html;
    # location = /50x.html {
    #     root   /usr/share/nginx/html/;
    # }
}
