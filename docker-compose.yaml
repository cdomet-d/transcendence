networks:
  transcendence:
    driver: bridge
    name: transcendence

secrets:
  ssl-cert.pem:
    file: ${TSECRETS}/ssl-cert.pem
  ssl-key.pem:
    file: ${TSECRETS}/ssl-key.pem

services:
  accessibility:
    build:
      context: ./services/accessibility
      dockerfile: Dockerfile
    container_name: accessibility
    image: accessibility:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/accessibility/app:/usr/app
  account:
    build:
      context: ./services/account
      dockerfile: Dockerfile
    container_name: account
    image: account:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/account/app:/usr/app
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: auth
    image: auth:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/auth/app:/usr/app
  dashboard:
    build:
      context: ./services/dashboards
      dockerfile: Dockerfile
    container_name: dashboard
    image: dashboard:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/dashboards/app:/usr/app
  friends:
    build:
      context: ./services/friends
      dockerfile: Dockerfile
    container_name: friends
    image: friends:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/friends/app:/usr/app
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: frontend
    image: frontend:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/frontend/app:/app
    # user: "${T_UID}:${T_GID}"
  gamemanager:
    build:
      context: ./services/GameManager
      dockerfile: Dockerfile
    container_name: gamemanager
    image: gamemanager:0.0.1
    environment:
      - PORT=2121
      - NATS_SERVER_TOKEN=${NATS_SERVER_TOKEN}
      - NGINXIP=nginx
    networks:
      - transcendence
    restart: unless-stopped
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/GameManager/app:/usr/app
    depends_on:
      matchmaking:
        condition: service_healthy
  matchmaking:
    build:
      context: ./services/matchmaking
      dockerfile: Dockerfile
    container_name: matchmaking
    image: matchmaking:0.0.1
    environment:
      - NATS_SERVER_TOKEN=${NATS_SERVER_TOKEN}
      - NGINXIP=nginx
    networks:
      - transcendence
    restart: unless-stopped
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/matchmaking/app:/usr/app
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
  monitoring:
    build:
      context: ./services/monitoring
      dockerfile: Dockerfile
    container_name: monitoring
    image: monitoring:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/monitoring/app:/usr/app
  nats-server:
    build:
      context: ./services/NATS
      dockerfile: Dockerfile
    container_name: nats-server
    image: nats:0.0.1
    environment:
      - NATS_SERVER_TOKEN=${NATS_SERVER_TOKEN}
    networks:
      - transcendence
    ports:
      - "4222:4222"
    restart: unless-stopped
  nginx:
    build:
      context: ./services/nginx/
      dockerfile: Dockerfile
    container_name: nginx
    environment:
      - NGINX_HOST=bigt.com
      - NGINX_PORT=443
    image: nginx:0.0.1
    networks:
      - transcendence
    ports:
      - "8443:443"
    restart: unless-stopped
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
  pong:
    build:
      context: ./services/pong
      dockerfile: Dockerfile
    container_name: pong
    environment:
      - NGINXIP=nginx
      - PORT=2020
      - NATS_SERVER_TOKEN=${NATS_SERVER_TOKEN}
    image: pong:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/pong/app:/usr/app
    depends_on:
      -  nats-server
    # user: "${T_UID}:${T_GID}"
  users:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    container_name: users
    image: users:0.0.1
    networks:
      - transcendence
    restart: unless-stopped
    environment:
      - NGINXIP=nginx
    secrets:
      - ssl-key.pem
      - ssl-cert.pem
    volumes:
      - ./services/users/app:/usr/app

